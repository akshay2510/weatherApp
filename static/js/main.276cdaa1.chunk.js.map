{"version":3,"sources":["components/forms.js","components/weather.js","components/headd.js","App.js","serviceWorker.js","index.js"],"names":["Forms","react_default","a","createElement","onSubmit","this","props","getweather","type","name","placeholder","Component","Weather","className","city","country","temp","error","description","Headd","React","api","App","state","undefined","_callee","e","cityy","countryy","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","sent","json","console","log","_this","setState","main","sys","weather","stop","headd","components_forms","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.276cdaa1.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nclass Forms extends Component {\r\n    render(){\r\n        return(\r\n               <div>\r\n               \r\n               <form onSubmit={this.props.getweather}>\r\n                   <input type='text' name='city' placeholder='City'/>\r\n                   <input type='text' name='country' placeholder='Country' />\r\n                   <button>Get weather</button>\r\n               </form>\r\n               </div>\r\n        )\r\n    };\r\n}\r\nexport default Forms;","import React,{Component} from 'react';\r\nclass Weather extends Component{\r\n\trender() {\r\n\t\treturn (\r\n\t\t   <div className=\"weather__info\">\r\n\t\t  {this.props.city && <p className=\"weather__key\">\tCity: \r\n\t\t  <span className=\"weather__value\"> {this.props.city}</span></p>}\r\n\t\t   {this.props.country &&\t<p className=\"weather__key\">Country:\r\n\t\t   <span className=\"weather__value\">{this.props.country}</span></p>}\r\n\t\t   \t{this.props.temp &&<p className=\"weather__key\">Temp:\r\n\t\t   \t<span className=\"weather__value\">{this.props.temp}</span></p>}\r\n\t\t   \t{this.props.error &&<p className=\"weather__key\">Error :\r\n\t\t   \t<span className=\"weather__error\">{this.props.error}</span></p>}\r\n\t\t   \t{this.props.description &&<p className=\"weather__key\">Description:\r\n\t\t   \t<span className=\"weather__value\">{this.props.description}</span></p>}\r\n\t\t   </div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default Weather;","import React from \"react\";\r\nclass Headd extends React.Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t<h1 className=\"title-container__title\">Find Weather</h1>\r\n\t\t<h3 className=\"title-container__subtitle\">Find out temperature, conditions and more...</h3>\r\n\t</div>\r\n\r\n\t\t\t)\r\n\t};\r\n}\r\nexport default Headd;","import React from 'react';\nimport Forms from './components/forms';\nimport Weather from './components/weather';\n\nimport Headd from './components/headd'\n\nconst api='f76ab8e88db2a12f2036d8ab10c199fb';\n\nclass App extends React.Component {\n\tstate={\n\t\ttemp:undefined,\n\t\tcity:undefined,\n\t    description:undefined,\n\t    error:undefined,\n\t    country:undefined,\n\t}\n\tgetweather = async (e) => {\n\t\te.preventDefault();\n\t\tconst cityy=e.target.elements.city.value;\n\t\tconst countryy=e.target.elements.country.value;\n\t\tconst api_call = await fetch('https://api.openweathermap.org/data/2.5/weather?q='+ cityy +','+ countryy +'&appid='+api+'&units=metric');\n\t\tconst data = await api_call.json();\n\t\tif(cityy && countryy){\n\t\tconsole.log(data);\n\t\tthis.setState({\n\t\t\ttemp:data.main.temp,\n\t\t\tcity:data.name,\n\t\t\tcountry:data.sys.country,\n\t\t\tdescription:data.weather[0].description,\n\t\t\terror:\"\"\n\t\t})\n\t}else{\n\t\tthis.setState({\n\t\ttemp:undefined,\n\t\tcity:undefined,\n\t    description:undefined,\n\t   \n\t    country:undefined,\n\n\t\t\terror:\"Please enter valid city name and country name\"\n\t\t\t})\n\t}\n\t}\n\trender() {\n\t\treturn (\n\t        <div>\n\t        <div className=\"wrapper\">\n            <div className=\"main\">\n            <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-xs-5 title-container\"><Headd />\n                  <div className=\"col-xs-7 form-container\">\n                  <Forms getweather={this.getweather} />\n\t           \t\t<Weather \n\t        \t\t\t\t\t\ttemp={this.state.temp}\n\t        \t\t\t\t\t\tcity={this.state.city}\n\t        \t\t\t\t\t\tcountry={this.state.country}\n\t        \t\t\t\t\t\tdescription={this.state.description}\n\t        \t\t\t\t\t\terror={this.state.error}\t\n\t        \t\t\t\t\t\t\t\t\t\t/>\n</div>\n                  </div>\n                  </div>\n                </div>\n                </div>\n                </div>\n\t        </div>\t\n\t\t);\n\t};\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './components/css/bootstrap.css';\nimport './components/css/my.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}